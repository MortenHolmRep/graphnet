"""test."""

import os
import math
import collections
from shutil import copy2


#
# Globals
#

SLURM_SUBMIT_EXE = "sbatch"
PBS_SUBMIT_EXE = "qsub"

SLURM_SCRIPT_DIRECTIVE = "#SBATCH"
PBS_SCRIPT_DIRECTIVE = "$PBS"


#
# Submission
#


def create_slurm_submit_file(  # type: ignore
    job_dir: str,  # type: ignore
    job_name: str,  # type: ignore
    exe_commands,  # type: ignore
    memory: int,  # type: ignore
    wall_time_hours: int = None,  # type: ignore
    partition: str = None,  # type: ignore
    mail_type: str = None,  # type: ignore
    mail_user: str = None,  # type: ignore
    num_gpus: int = 0,  # type: ignore
    use_array: bool = False,  # type: ignore
    export_env: bool = True,  # type: ignore
    out_file: str = None,  # type: ignore
    err_file: str = None,  # type: ignore
    working_dir: str = None,  # type: ignore
    pbs: bool = False,  # type: ignore
):  # type: ignore
    """Create a SLURM/PBS submit file."""
    # Check got some exectiable commands
    assert isinstance(
        exe_commands, collections.Sequence
    ), "`exe_commands` must be a list or similar"
    num_exe_commands = len(exe_commands)
    if num_exe_commands == 0:
        raise Exception(
            "No executable commands provided, cannot created SLURM submit file"
        )

    # Toggle SLURM vs PBS
    script_directive = PBS_SCRIPT_DIRECTIVE if pbs else SLURM_SCRIPT_DIRECTIVE

    # Check output dir exists
    job_dir = os.path.expandvars(os.path.expanduser(job_dir))
    job_dir = os.path.abspath(job_dir)
    if not os.path.isdir(job_dir):
        raise Exception(
            'Cannot create SLURM file, output directory "%s" does not exist'
            % job_dir
        )

    # Define a name for the submit file we are about to generate
    submit_file_path = os.path.join(job_dir, job_name + ".slurm")

    # Make file
    with open(submit_file_path, "w") as submit_file:
        # Use bash
        submit_file.write("#!/bin/bash\n")

        submit_file.write("\n")

        # Write a header
        submit_file.write(
            "# Autogenerated using fridge/utils/cluster/slurm.create_slurm_submit_file\n"
        )

        submit_file.write("\n")

        # Define job name
        define_job_name(job_name, pbs, script_directive, submit_file)  # type: ignore

        # Define paths for log files
        # Format depends on whether this with be run as a single job or as part of a job array
        define_paths_for_log_files(  # type: ignore
            job_dir,
            use_array,
            out_file,
            err_file,
            pbs,
            script_directive,
            submit_file,
        )  # type: ignore

        # Define partition
        define_partition(partition, pbs, script_directive, submit_file)  # type: ignore

        # Define mail
        define_mail(mail_type, mail_user, script_directive, submit_file)  # type: ignore

        # Define number of tasks
        if pbs:
            submit_file.write(
                "%s -l ppn=1\n" % script_directive
            )  # TODO Add argument
        else:
            submit_file.write(
                "%s --ntasks=1\n" % script_directive
            )  # TODO Add argument

        # Define num GPUs
        define_number_of_gpus(num_gpus, pbs, script_directive, submit_file)  # type: ignore

        # Define memory request
        define_memory_request(memory, pbs, script_directive, submit_file)  # type: ignore

        # Define wall time
        if wall_time_hours is not None:
            wall_time_days = int(math.floor(float(wall_time_hours) / 24.0))
            wall_time_hours = wall_time_hours - (wall_time_days * 24)
            if pbs:
                submit_file.write(
                    "%s -l walltime=%02i-%02i:00:00\n"
                    % (script_directive, wall_time_days, wall_time_hours)
                )  # Format: days-hrs:min:sec
            else:
                submit_file.write(
                    "%s --time=%02i-%02i:00:00\n"
                    % (script_directive, wall_time_days, wall_time_hours)
                )  # Format: days-hrs:min:sec

        # Export the environment of the submitter if the user requested it
        # This can be dangerous, and is not recommended
        if pbs:
            # For PBS, add -V arg to expirt env variables (and do nothing to not do this)
            if export_env:
                submit_file.write("%s -V\n" % (script_directive))
        else:
            # For SLURM, the system defaults to exporting env vars. So here need to explicitly set whether exporting or not
            submit_file.write(
                "%s --export=%s\n"
                % (script_directive, "ALL" if export_env else "NONE")
            )

        submit_file.write("\n")

        # Report a few basic details
        submit_file.write("echo 'Running on host' $HOSTNAME 'at' `date`\n")
        if use_array:
            submit_file.write(
                "echo 'SLURM array index :' $SLURM_ARRAY_TASK_ID\n"
            )
        submit_file.write("echo " "\n")
        submit_file.write("\n")

        # Change to the working dir
        # Using this instead if the --workdir arg because this doesn't support using the array index as far as I can tell
        if working_dir is not None:
            # submit_file.write( "%s --workdir=%s\n" % (script_directive,working_dir) )
            submit_file.write("mkdir -p  %s\n" % working_dir)
            submit_file.write("cd  %s\n" % working_dir)
            submit_file.write("echo 'Changed working directory :' $PWD\n")
            submit_file.write("echo " "\n")
            submit_file.write("\n")

        # TODO enforce directory changed worked

        # Loop over jobs provided and add a line to run it
        submit_file.write(
            "echo 'Launching %i processe(s)'\n" % len(exe_commands)
        )
        for i_cmd, exe_cmd in enumerate(exe_commands):
            # submit_file.write( "srun %s\n" % (exe_cmd) )
            submit_file.write(exe_cmd + "\n")
        submit_file.write("echo " "\n")
        submit_file.write("\n")

        # Report that everything is finished
        submit_file.write("echo 'Submission completed at' `date`\n")
        submit_file.write("echo " "\n")
        submit_file.write("\n")

    print(("SLURM submit file written : %s" % (submit_file_path)))
    return submit_file_path


def define_memory_request(memory, pbs, script_directive, submit_file):  # type: ignore
    """test."""
    if pbs:
        submit_file.write("%s -l vmem=%i\n" % (script_directive, memory))
    else:
        submit_file.write("%s --mem=%imb\n" % (script_directive, memory))


def define_number_of_gpus(num_gpus, pbs, script_directive, submit_file):  # type: ignore
    """test."""
    if num_gpus > 0:
        if pbs:
            submit_file.write("%s -l gpus=%i\n" % (script_directive, num_gpus))
        else:
            submit_file.write(
                "%s --gres=gpu:%i\n" % (script_directive, num_gpus)
            )


def define_mail(mail_type, mail_user, script_directive, submit_file):  # type: ignore
    """test."""
    if (mail_type is not None) and (mail_user is not None):
        submit_file.write(
            "%s --mail-type %s\n" % (script_directive, mail_type)
        )
        submit_file.write(
            "%s --mail-user %s\n" % (script_directive, mail_user)
        )


def define_partition(partition, pbs, script_directive, submit_file):  # type: ignore
    """test."""
    if partition is not None:
        if pbs:
            submit_file.write("%s -q %s\n" % (script_directive, partition))
        else:
            submit_file.write(
                "%s --partition=%s\n" % (script_directive, partition)
            )


def define_paths_for_log_files(  # type: ignore
    job_dir, use_array, out_file, err_file, pbs, script_directive, submit_file
):  # type: ignore
    """test."""
    output_file_stem = "job_" + ("%08a__%A" if use_array else "__%j")
    log_file_stem = os.path.join(job_dir, output_file_stem)
    if out_file is None:
        out_file = log_file_stem + ".out"
    if pbs:
        submit_file.write("%s -o %s\n" % (script_directive, out_file))
    else:
        submit_file.write("%s --output=%s\n" % (script_directive, out_file))
    if err_file is None:
        err_file = log_file_stem + ".err"
    if pbs:
        submit_file.write("%s -e %s\n" % (script_directive, out_file))
    else:
        submit_file.write("%s --error=%s\n" % (script_directive, err_file))


def define_job_name(job_name, pbs, script_directive, submit_file):  # type: ignore
    """test."""
    if pbs:
        submit_file.write("%s -N %s\n" % (script_directive, job_name))
    else:
        submit_file.write("%s --job-name=%s\n" % (script_directive, job_name))


def create_pbs_submit_file(**kw):  # type: ignore
    """Alias to create a PBS submit file."""
    return create_slurm_submit_file(pbs=True, **kw)


#
# Test
#

if __name__ == "__main__":

    from graphnet.utilities.cluster.filesys_tools import make_dir

    test_dir = "./tmp/slurm"
    make_dir(test_dir)  # type: ignore

    exe_commands = [
        "echo 'bar'",
        "echo 'bar'",
    ]

    submit_file_path = create_slurm_submit_file(
        job_dir=test_dir,
        job_name="test",
        partition="icecube",
        exe_commands=exe_commands,
        memory=1000,
        pbs=False,
    )  # type: ignore
